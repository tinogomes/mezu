# Mezu

Mezu is a Rails 3 Engine to manage system messages globally, or for a specific object.

**Tested only with Ruby 1.9.2**

## How to Install ?

It's a piece of cake!

### Add on your Gemfile

	gem "mezu"

### Install gem

	$ bundle install # Of course, you can execute `gem install mezu`

### Execute Mezu generator

	rails generate mezu:install

### Execute apply migrations

	rake db:migrate

## What mezu:install generator do ?

This step create some files on your Rails project...

	config/db/yyyymmddhhmmss_create_mezu_messages.rb
	config/initializers/mezu.rb
	public/mezu/mezu.css

### Details about the created migration.

	class CreateMezuMessages < ActiveRecord::Migration
	  def self.up
	    create_table :mezu_messages do |t|
	      t.string        :title
	      t.string        :level, :limit => 10
	      t.string        :body
	      t.datetime      :expires_at
	      t.datetime      :read_at
	      t.references    :messageable, :polymorphic => true, :null => true

	      t.timestamps
	    end

	    add_index :mezu_messages, [:messageable_type, :messageable_id]
	  end

	  def self.down
	    drop_table :mezu_messages
	  end
	end

## How to use?

This engine adds on your app the path /mezu, to CRUD your mezu system messages

To protect mezu system messages access on your CRUD, go to config/initializers/mezu.rb file and implement your powerful authentication protection.

## Examples

### To display global system messages on your view:

	# app/controllers/application_controller.rb
	class ApplicationController < ...
	  ...
	  before_filter do load_global_mezu_messages
	    @mezu_messages = Mezu::Message.global.all
	  end
	  ...
	end

	# app/views/layouts/application.html.erb
	...
	<% if @mezu_messages.any? %>
	  <ul id="global-mezu-messages">
	    <% @mezu_messages.each do |message| %>
	      <li class="<%= message.level %>"><%= message.body %></li>
	    <% end %>
	  </ul>
	<% end %>
	...

### To display user's system messages, supposing you have current_user helper method.

	# app/controllers/application_controllers.rb
	class ApplicationController < ...
	  ...
	  before_filter do load_mezu_messages_for_current_user
	    @user_mezu_messages = Mezu::Message.for_messageable(current_user).all
	  end
	  ...
	end

	# app/views/layouts/application.html.erb
	...
	<% if @user_mezu_messages.any? %>
	  <ul id="user-mezu-messages">
	    <% @user_mezu_messages.each do |message| %>
	      <li class="<%= message.level %>"><%= message.body %></li>
	    <% end %>
	  </ul>
	<% end %>
	...

### I18n support

If you're handling more than one locale, you can configure which locales you can associate messages with.
Just go to `config/initializers/mezu.rb` and set the available locales:

	Mezu.configure do
	  config.available_locales = [:en, :"pt-BR"]
	end

By default, these will return the `I18n.available_locales` list.

You can then filter the message with `by_locale` scope:

	Mezu::Message.for_messageable(current_user).by_locale(I18n.locale)

## Maintainer

- [Tino Gomes](http://github.com/tinogomes)

## Contributors

- [Nando Vieira](http://github.com/fnando)
- [PotHix](http://github.com/pothix)

## License

Copyright (c) 2010 Celestino Gomes, released under the Creative Commons license
